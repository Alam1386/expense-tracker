{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/IncomeExpense.js","components/Content.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","components/Main.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalState","createContext","GlobalProvider","props","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","children","IncomeExpense","amounts","useContext","map","amount","total","reduce","acc","item","toFixed","income","expense","Math","abs","Content","Transaction","sign","name","onClick","TransactionList","key","AddTransaction","useState","setName","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","placeholder","onChange","target","Main","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.909db2a3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <div className=\"header\">\n      <h1 className=\"header-title\">Expense Tracker</h1>;\n    </div>\n  );\n};\n","export default (state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction.id !== action.payload\n        ),\n      };\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions],\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nconst initialState = {\n  transactions: [],\n};\nexport const GlobalState = createContext(initialState);\n\n// Create Provider\n\nexport const GlobalProvider = (props) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const deleteTransaction = (id) => {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  };\n  const addTransaction = (transaction) => {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  };\n  return (\n    <GlobalState.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {props.children}\n    </GlobalState.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalState } from \"../context/GlobalState\";\nexport const IncomeExpense = () => {\n  const { transactions } = useContext(GlobalState);\n  const amounts = transactions.map((transaction) => transaction.amount);\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n  const expense = Math.abs(\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0)\n  ).toFixed(2);\n  return (\n    <div className=\"income-expense\">\n      <div className=\"row\">\n        <p className=\"title\">Income</p>\n        <p className=\"amount\">${income}</p>\n      </div>\n      <div className=\"row\">\n        <p className=\"title\">Expense</p>\n        <p className=\"expense-amount\">${expense}</p>\n      </div>\n      <div className=\"row\">\n        <p className=\"title\">Balance</p>\n        <p className=\"amount\">${total}</p>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Content = ({ children }) => {\n  return <div className=\"content\">{children}</div>;\n};\n","import React, { useContext } from \"react\";\nimport { GlobalState } from \"../context/GlobalState\";\n\nexport const Transaction = ({ transaction }) => {\n  const { deleteTransaction } = useContext(GlobalState);\n\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\n  return (\n    <>\n      <li className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\n        <p className=\"transaction-details\">{transaction.name}</p>\n        <p className=\"amount\">\n          {sign}${Math.abs(transaction.amount)}\n        </p>\n        <button\n          className=\"delete-btn\"\n          onClick={() => deleteTransaction(transaction.id)}\n        >\n          X\n        </button>\n      </li>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalState } from \"../context/GlobalState\";\nimport { Transaction } from \"./Transaction\";\n\nexport const TransactionList = () => {\n  const { transactions } = useContext(GlobalState);\n  return (\n    <div className=\"transaction-list\">\n      <h3 className=\"title\">Transaction Details</h3>\n      <ul className=\"wrapper\">\n        {transactions.map((transaction) => (\n          <Transaction key={transaction.id} transaction={transaction} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { GlobalState } from \"../context/GlobalState\";\nexport const AddTransaction = () => {\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n\n  const { addTransaction } = useContext(GlobalState);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: Math.floor(Math.random() * 100000000),\n      name,\n      amount: +amount,\n    };\n    addTransaction(newTransaction);\n  };\n  return (\n    <div className=\"add-transaction\">\n      <h3 className=\"title\">Add New Transaction</h3>\n      <form className=\"wrapper\" onSubmit={onSubmit}>\n        <div className=\"row\">\n          <p className=\"transaction-details\">Enter transaction details:</p>\n          <input\n            className=\"input\"\n            placeholder=\"Enter transaction details\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></input>\n        </div>\n        <div className=\"row\">\n          <p className=\"transaction-details\">Transaction Amount:</p>\n          <input\n            className=\"input\"\n            placeholder=\"0\"\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n          ></input>\n        </div>\n        <button className=\"button\">Add Transaction</button>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Header } from \"./Header\";\nimport { IncomeExpense } from \"./IncomeExpense\";\nimport { Content } from \"./Content\";\nimport { TransactionList } from \"./TransactionList\";\nimport { AddTransaction } from \"./AddTransaction\";\n\nfunction Main() {\n  return (\n    <div className=\"main\">\n      <Header />\n      <Content>\n        <IncomeExpense />\n        <AddTransaction />\n        <TransactionList />\n      </Content>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\n\nexport const Wrapper = (props) => {\n  return <div className=\"wrapper\">{props.children}</div>;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport { Wrapper } from \"./components/Wrapper\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Wrapper>\n        <Main />\n      </Wrapper>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}